// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ListLogs extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ListLogs entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ListLogs entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ListLogs", id.toString(), this);
  }

  static load(id: string): ListLogs | null {
    return store.get("ListLogs", id) as ListLogs | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contract(): string | null {
    let value = this.get("contract");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set contract(value: string | null) {
    if (value === null) {
      this.unset("contract");
    } else {
      this.set("contract", Value.fromString(value as string));
    }
  }

  get listId(): BigInt | null {
    let value = this.get("listId");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set listId(value: BigInt | null) {
    if (value === null) {
      this.unset("listId");
    } else {
      this.set("listId", Value.fromBigInt(value as BigInt));
    }
  }

  get owner(): string | null {
    let value = this.get("owner");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (value === null) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromString(value as string));
    }
  }

  get collection(): string | null {
    let value = this.get("collection");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set collection(value: string | null) {
    if (value === null) {
      this.unset("collection");
    } else {
      this.set("collection", Value.fromString(value as string));
    }
  }

  get assetId(): BigInt | null {
    let value = this.get("assetId");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set assetId(value: BigInt | null) {
    if (value === null) {
      this.unset("assetId");
    } else {
      this.set("assetId", Value.fromBigInt(value as BigInt));
    }
  }

  get quantity(): BigInt | null {
    let value = this.get("quantity");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set quantity(value: BigInt | null) {
    if (value === null) {
      this.unset("quantity");
    } else {
      this.set("quantity", Value.fromBigInt(value as BigInt));
    }
  }

  get mask(): i32 {
    let value = this.get("mask");
    return value.toI32();
  }

  set mask(value: i32) {
    this.set("mask", Value.fromI32(value));
  }

  get price(): BigInt | null {
    let value = this.get("price");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt | null) {
    if (value === null) {
      this.unset("price");
    } else {
      this.set("price", Value.fromBigInt(value as BigInt));
    }
  }

  get paymentToken(): string | null {
    let value = this.get("paymentToken");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set paymentToken(value: string | null) {
    if (value === null) {
      this.unset("paymentToken");
    } else {
      this.set("paymentToken", Value.fromString(value as string));
    }
  }

  get expiration(): BigInt | null {
    let value = this.get("expiration");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set expiration(value: BigInt | null) {
    if (value === null) {
      this.unset("expiration");
    } else {
      this.set("expiration", Value.fromBigInt(value as BigInt));
    }
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (value === null) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(value as string));
    }
  }

  get time(): BigInt | null {
    let value = this.get("time");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set time(value: BigInt | null) {
    if (value === null) {
      this.unset("time");
    } else {
      this.set("time", Value.fromBigInt(value as BigInt));
    }
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }
}

export class BidLogs extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save BidLogs entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BidLogs entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BidLogs", id.toString(), this);
  }

  static load(id: string): BidLogs | null {
    return store.get("BidLogs", id) as BidLogs | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contract(): string | null {
    let value = this.get("contract");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set contract(value: string | null) {
    if (value === null) {
      this.unset("contract");
    } else {
      this.set("contract", Value.fromString(value as string));
    }
  }

  get listId(): BigInt | null {
    let value = this.get("listId");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set listId(value: BigInt | null) {
    if (value === null) {
      this.unset("listId");
    } else {
      this.set("listId", Value.fromBigInt(value as BigInt));
    }
  }

  get fromAddress(): string | null {
    let value = this.get("fromAddress");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set fromAddress(value: string | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromString(value as string));
    }
  }

  get toAddress(): string | null {
    let value = this.get("toAddress");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set toAddress(value: string | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromString(value as string));
    }
  }

  get bidOrderId(): BigInt | null {
    let value = this.get("bidOrderId");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set bidOrderId(value: BigInt | null) {
    if (value === null) {
      this.unset("bidOrderId");
    } else {
      this.set("bidOrderId", Value.fromBigInt(value as BigInt));
    }
  }

  get quantity(): BigInt | null {
    let value = this.get("quantity");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set quantity(value: BigInt | null) {
    if (value === null) {
      this.unset("quantity");
    } else {
      this.set("quantity", Value.fromBigInt(value as BigInt));
    }
  }

  get bidToken(): string | null {
    let value = this.get("bidToken");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set bidToken(value: string | null) {
    if (value === null) {
      this.unset("bidToken");
    } else {
      this.set("bidToken", Value.fromString(value as string));
    }
  }

  get bidPrice(): BigInt | null {
    let value = this.get("bidPrice");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set bidPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("bidPrice");
    } else {
      this.set("bidPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get expiration(): BigInt | null {
    let value = this.get("expiration");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set expiration(value: BigInt | null) {
    if (value === null) {
      this.unset("expiration");
    } else {
      this.set("expiration", Value.fromBigInt(value as BigInt));
    }
  }

  get status(): i32 {
    let value = this.get("status");
    return value.toI32();
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (value === null) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(value as string));
    }
  }

  get time(): BigInt | null {
    let value = this.get("time");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set time(value: BigInt | null) {
    if (value === null) {
      this.unset("time");
    } else {
      this.set("time", Value.fromBigInt(value as BigInt));
    }
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }
}

export class UpdateBidLogs extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UpdateBidLogs entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UpdateBidLogs entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UpdateBidLogs", id.toString(), this);
  }

  static load(id: string): UpdateBidLogs | null {
    return store.get("UpdateBidLogs", id) as UpdateBidLogs | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contract(): string | null {
    let value = this.get("contract");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set contract(value: string | null) {
    if (value === null) {
      this.unset("contract");
    } else {
      this.set("contract", Value.fromString(value as string));
    }
  }

  get fromAddress(): string | null {
    let value = this.get("fromAddress");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set fromAddress(value: string | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromString(value as string));
    }
  }

  get bidOrderId(): BigInt | null {
    let value = this.get("bidOrderId");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set bidOrderId(value: BigInt | null) {
    if (value === null) {
      this.unset("bidOrderId");
    } else {
      this.set("bidOrderId", Value.fromBigInt(value as BigInt));
    }
  }

  get quantity(): BigInt | null {
    let value = this.get("quantity");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set quantity(value: BigInt | null) {
    if (value === null) {
      this.unset("quantity");
    } else {
      this.set("quantity", Value.fromBigInt(value as BigInt));
    }
  }

  get bidPrice(): string | null {
    let value = this.get("bidPrice");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set bidPrice(value: string | null) {
    if (value === null) {
      this.unset("bidPrice");
    } else {
      this.set("bidPrice", Value.fromString(value as string));
    }
  }

  get bidAmount(): BigInt | null {
    let value = this.get("bidAmount");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set bidAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("bidAmount");
    } else {
      this.set("bidAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get expiration(): BigInt | null {
    let value = this.get("expiration");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set expiration(value: BigInt | null) {
    if (value === null) {
      this.unset("expiration");
    } else {
      this.set("expiration", Value.fromBigInt(value as BigInt));
    }
  }

  get status(): i32 {
    let value = this.get("status");
    return value.toI32();
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (value === null) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(value as string));
    }
  }

  get time(): BigInt | null {
    let value = this.get("time");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set time(value: BigInt | null) {
    if (value === null) {
      this.unset("time");
    } else {
      this.set("time", Value.fromBigInt(value as BigInt));
    }
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }
}

export class BuyLogs extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save BuyLogs entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BuyLogs entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BuyLogs", id.toString(), this);
  }

  static load(id: string): BuyLogs | null {
    return store.get("BuyLogs", id) as BuyLogs | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contract(): string | null {
    let value = this.get("contract");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set contract(value: string | null) {
    if (value === null) {
      this.unset("contract");
    } else {
      this.set("contract", Value.fromString(value as string));
    }
  }

  get listId(): BigInt | null {
    let value = this.get("listId");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set listId(value: BigInt | null) {
    if (value === null) {
      this.unset("listId");
    } else {
      this.set("listId", Value.fromBigInt(value as BigInt));
    }
  }

  get fromAddress(): string | null {
    let value = this.get("fromAddress");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set fromAddress(value: string | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromString(value as string));
    }
  }

  get toAddress(): string | null {
    let value = this.get("toAddress");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set toAddress(value: string | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromString(value as string));
    }
  }

  get quantity(): BigInt | null {
    let value = this.get("quantity");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set quantity(value: BigInt | null) {
    if (value === null) {
      this.unset("quantity");
    } else {
      this.set("quantity", Value.fromBigInt(value as BigInt));
    }
  }

  get paymentToken(): string | null {
    let value = this.get("paymentToken");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set paymentToken(value: string | null) {
    if (value === null) {
      this.unset("paymentToken");
    } else {
      this.set("paymentToken", Value.fromString(value as string));
    }
  }

  get paymentAmount(): BigInt | null {
    let value = this.get("paymentAmount");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set paymentAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("paymentAmount");
    } else {
      this.set("paymentAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get expiration(): BigInt | null {
    let value = this.get("expiration");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set expiration(value: BigInt | null) {
    if (value === null) {
      this.unset("expiration");
    } else {
      this.set("expiration", Value.fromBigInt(value as BigInt));
    }
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (value === null) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(value as string));
    }
  }

  get time(): BigInt | null {
    let value = this.get("time");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set time(value: BigInt | null) {
    if (value === null) {
      this.unset("time");
    } else {
      this.set("time", Value.fromBigInt(value as BigInt));
    }
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }
}

export class AcceptBidLogs extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AcceptBidLogs entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AcceptBidLogs entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AcceptBidLogs", id.toString(), this);
  }

  static load(id: string): AcceptBidLogs | null {
    return store.get("AcceptBidLogs", id) as AcceptBidLogs | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contract(): string | null {
    let value = this.get("contract");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set contract(value: string | null) {
    if (value === null) {
      this.unset("contract");
    } else {
      this.set("contract", Value.fromString(value as string));
    }
  }

  get fromAddress(): string | null {
    let value = this.get("fromAddress");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set fromAddress(value: string | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromString(value as string));
    }
  }

  get toAddress(): string | null {
    let value = this.get("toAddress");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set toAddress(value: string | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromString(value as string));
    }
  }

  get bidOrderId(): BigInt | null {
    let value = this.get("bidOrderId");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set bidOrderId(value: BigInt | null) {
    if (value === null) {
      this.unset("bidOrderId");
    } else {
      this.set("bidOrderId", Value.fromBigInt(value as BigInt));
    }
  }

  get isAccept(): boolean {
    let value = this.get("isAccept");
    return value.toBoolean();
  }

  set isAccept(value: boolean) {
    this.set("isAccept", Value.fromBoolean(value));
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (value === null) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(value as string));
    }
  }

  get time(): BigInt | null {
    let value = this.get("time");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set time(value: BigInt | null) {
    if (value === null) {
      this.unset("time");
    } else {
      this.set("time", Value.fromBigInt(value as BigInt));
    }
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }
}

export class CancelBidLogs extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CancelBidLogs entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CancelBidLogs entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CancelBidLogs", id.toString(), this);
  }

  static load(id: string): CancelBidLogs | null {
    return store.get("CancelBidLogs", id) as CancelBidLogs | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contract(): string | null {
    let value = this.get("contract");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set contract(value: string | null) {
    if (value === null) {
      this.unset("contract");
    } else {
      this.set("contract", Value.fromString(value as string));
    }
  }

  get fromAddress(): string | null {
    let value = this.get("fromAddress");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set fromAddress(value: string | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromString(value as string));
    }
  }

  get toAddress(): string | null {
    let value = this.get("toAddress");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set toAddress(value: string | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromString(value as string));
    }
  }

  get bidOrderId(): BigInt | null {
    let value = this.get("bidOrderId");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set bidOrderId(value: BigInt | null) {
    if (value === null) {
      this.unset("bidOrderId");
    } else {
      this.set("bidOrderId", Value.fromBigInt(value as BigInt));
    }
  }

  get isCancel(): boolean {
    let value = this.get("isCancel");
    return value.toBoolean();
  }

  set isCancel(value: boolean) {
    this.set("isCancel", Value.fromBoolean(value));
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (value === null) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(value as string));
    }
  }

  get time(): BigInt | null {
    let value = this.get("time");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set time(value: BigInt | null) {
    if (value === null) {
      this.unset("time");
    } else {
      this.set("time", Value.fromBigInt(value as BigInt));
    }
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }
}

export class UpdateItemListLogs extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UpdateItemListLogs entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UpdateItemListLogs entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UpdateItemListLogs", id.toString(), this);
  }

  static load(id: string): UpdateItemListLogs | null {
    return store.get("UpdateItemListLogs", id) as UpdateItemListLogs | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get listId(): BigInt | null {
    let value = this.get("listId");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set listId(value: BigInt | null) {
    if (value === null) {
      this.unset("listId");
    } else {
      this.set("listId", Value.fromBigInt(value as BigInt));
    }
  }

  get fromAddress(): string | null {
    let value = this.get("fromAddress");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set fromAddress(value: string | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromString(value as string));
    }
  }

  get mask(): i32 {
    let value = this.get("mask");
    return value.toI32();
  }

  set mask(value: i32) {
    this.set("mask", Value.fromI32(value));
  }

  get price(): BigInt | null {
    let value = this.get("price");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt | null) {
    if (value === null) {
      this.unset("price");
    } else {
      this.set("price", Value.fromBigInt(value as BigInt));
    }
  }

  get paymentToken(): string | null {
    let value = this.get("paymentToken");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set paymentToken(value: string | null) {
    if (value === null) {
      this.unset("paymentToken");
    } else {
      this.set("paymentToken", Value.fromString(value as string));
    }
  }

  get expiration(): BigInt | null {
    let value = this.get("expiration");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set expiration(value: BigInt | null) {
    if (value === null) {
      this.unset("expiration");
    } else {
      this.set("expiration", Value.fromBigInt(value as BigInt));
    }
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (value === null) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(value as string));
    }
  }

  get time(): BigInt | null {
    let value = this.get("time");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set time(value: BigInt | null) {
    if (value === null) {
      this.unset("time");
    } else {
      this.set("time", Value.fromBigInt(value as BigInt));
    }
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }
}

export class CancelListedLogs extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CancelListedLogs entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CancelListedLogs entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CancelListedLogs", id.toString(), this);
  }

  static load(id: string): CancelListedLogs | null {
    return store.get("CancelListedLogs", id) as CancelListedLogs | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contract(): string | null {
    let value = this.get("contract");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set contract(value: string | null) {
    if (value === null) {
      this.unset("contract");
    } else {
      this.set("contract", Value.fromString(value as string));
    }
  }

  get listId(): BigInt | null {
    let value = this.get("listId");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set listId(value: BigInt | null) {
    if (value === null) {
      this.unset("listId");
    } else {
      this.set("listId", Value.fromBigInt(value as BigInt));
    }
  }

  get status(): i32 {
    let value = this.get("status");
    return value.toI32();
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (value === null) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(value as string));
    }
  }

  get time(): BigInt | null {
    let value = this.get("time");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set time(value: BigInt | null) {
    if (value === null) {
      this.unset("time");
    } else {
      this.set("time", Value.fromBigInt(value as BigInt));
    }
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }
}
