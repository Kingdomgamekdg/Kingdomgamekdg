// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class AssetLogs extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AssetLogs entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AssetLogs entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AssetLogs", id.toString(), this);
  }

  static load(id: string): AssetLogs | null {
    return store.get("AssetLogs", id) as AssetLogs | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collection(): string | null {
    let value = this.get("collection");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set collection(value: string | null) {
    if (value === null) {
      this.unset("collection");
    } else {
      this.set("collection", Value.fromString(value as string));
    }
  }

  get assetId(): BigInt | null {
    let value = this.get("assetId");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set assetId(value: BigInt | null) {
    if (value === null) {
      this.unset("assetId");
    } else {
      this.set("assetId", Value.fromBigInt(value as BigInt));
    }
  }

  get uri(): string | null {
    let value = this.get("uri");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set uri(value: string | null) {
    if (value === null) {
      this.unset("uri");
    } else {
      this.set("uri", Value.fromString(value as string));
    }
  }

  get creator(): string | null {
    let value = this.get("creator");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set creator(value: string | null) {
    if (value === null) {
      this.unset("creator");
    } else {
      this.set("creator", Value.fromString(value as string));
    }
  }

  get isReviewed(): boolean {
    let value = this.get("isReviewed");
    return value.toBoolean();
  }

  set isReviewed(value: boolean) {
    this.set("isReviewed", Value.fromBoolean(value));
  }

  get editions(): BigInt | null {
    let value = this.get("editions");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set editions(value: BigInt | null) {
    if (value === null) {
      this.unset("editions");
    } else {
      this.set("editions", Value.fromBigInt(value as BigInt));
    }
  }

  get totalEditions(): BigInt | null {
    let value = this.get("totalEditions");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalEditions(value: BigInt | null) {
    if (value === null) {
      this.unset("totalEditions");
    } else {
      this.set("totalEditions", Value.fromBigInt(value as BigInt));
    }
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (value === null) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(value as string));
    }
  }

  get time(): BigInt | null {
    let value = this.get("time");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set time(value: BigInt | null) {
    if (value === null) {
      this.unset("time");
    } else {
      this.set("time", Value.fromBigInt(value as BigInt));
    }
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }
}

export class ReviewLogs extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ReviewLogs entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ReviewLogs entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ReviewLogs", id.toString(), this);
  }

  static load(id: string): ReviewLogs | null {
    return store.get("ReviewLogs", id) as ReviewLogs | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collection(): string | null {
    let value = this.get("collection");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set collection(value: string | null) {
    if (value === null) {
      this.unset("collection");
    } else {
      this.set("collection", Value.fromString(value as string));
    }
  }

  get assetId(): BigInt | null {
    let value = this.get("assetId");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set assetId(value: BigInt | null) {
    if (value === null) {
      this.unset("assetId");
    } else {
      this.set("assetId", Value.fromBigInt(value as BigInt));
    }
  }

  get result(): boolean {
    let value = this.get("result");
    return value.toBoolean();
  }

  set result(value: boolean) {
    this.set("result", Value.fromBoolean(value));
  }

  get reviewer(): string | null {
    let value = this.get("reviewer");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set reviewer(value: string | null) {
    if (value === null) {
      this.unset("reviewer");
    } else {
      this.set("reviewer", Value.fromString(value as string));
    }
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (value === null) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(value as string));
    }
  }

  get time(): BigInt | null {
    let value = this.get("time");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set time(value: BigInt | null) {
    if (value === null) {
      this.unset("time");
    } else {
      this.set("time", Value.fromBigInt(value as BigInt));
    }
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }
}

export class TransferLogs extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TransferLogs entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TransferLogs entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TransferLogs", id.toString(), this);
  }

  static load(id: string): TransferLogs | null {
    return store.get("TransferLogs", id) as TransferLogs | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collection(): string | null {
    let value = this.get("collection");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set collection(value: string | null) {
    if (value === null) {
      this.unset("collection");
    } else {
      this.set("collection", Value.fromString(value as string));
    }
  }

  get assetId(): BigInt | null {
    let value = this.get("assetId");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set assetId(value: BigInt | null) {
    if (value === null) {
      this.unset("assetId");
    } else {
      this.set("assetId", Value.fromBigInt(value as BigInt));
    }
  }

  get fromAddress(): string | null {
    let value = this.get("fromAddress");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set fromAddress(value: string | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromString(value as string));
    }
  }

  get toAddress(): string | null {
    let value = this.get("toAddress");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set toAddress(value: string | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromString(value as string));
    }
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (value === null) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(value as BigInt));
    }
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (value === null) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(value as string));
    }
  }

  get time(): BigInt | null {
    let value = this.get("time");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set time(value: BigInt | null) {
    if (value === null) {
      this.unset("time");
    } else {
      this.set("time", Value.fromBigInt(value as BigInt));
    }
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }
}
